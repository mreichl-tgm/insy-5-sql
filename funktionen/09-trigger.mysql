-- :: Au09a ::
-- AUTHOR: Markus Reichl
-- VERSION: 2018-04-19
DELIMITER //
CREATE TRIGGER trigger_rechnung 
	BEFORE INSERT ON rechnung 
	FOR EACH ROW 
	BEGIN 
		IF NEW.datum IS NULL THEN
			SET NEW.datum = CURRENT_DATE;
		END IF;
	END;//
DELIMITER ;

INSERT INTO rechnung VALUES(7, NULL, 2, 'offen', 2);

SELECT * FROM rechnung;

-- :: Au09b ::
-- AUTHOR: Markus Reichl
-- VERSION: 2018-04-19
CREATE TABLE preis (
	snr     INTEGER,
    datum   DATE,
    diff	DECIMAL(6,2),
    PRIMARY KEY (snr, datum),
	FOREIGN KEY (snr) REFERENCES speise (snr) ON UPDATE CASCADE ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER trigger_preis 
	BEFORE UPDATE ON speise 
	FOR EACH ROW 
	BEGIN 
		IF NEW.preis <> OLD.preis THEN
			INSERT INTO preis VALUES(NEW.snr, CURRENT_DATE, NEW.preis - OLD.preis);
		END IF;
	END;//
DELIMITER ;

UPDATE speise SET preis = 24 WHERE snr = 8;

SELECT * FROM preis;

-- :: Au09c ::
-- AUTHOR: Markus Reichl
-- VERSION: 2018-04-19
CREATE TABLE storno (
	scount      SMALLINT,
    rnr         INTEGER,
    snr         INTEGER,
    PRIMARY KEY (rnr, snr),
    FOREIGN KEY (rnr) REFERENCES rechnung (rnr) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (snr) REFERENCES speise (snr) ON UPDATE CASCADE ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER trigger_storno
	BEFORE DELETE ON bestellung 
	FOR EACH ROW 
	BEGIN 
		INSERT INTO bestellstorno VALUES (OLD.scount, OLD.rnr, OLD.snr);
	END;//
DELIMITER ;

DELETE FROM bestellung WHERE rnr = 1 AND snr = 1;

SELECT * FROM storno;


-- :: Au09d ::
-- AUTHOR: Markus Reichl
-- VERSION: 2018-04-19
CREATE TABLE stats (
	sdate       DATE,
    scount      INTEGER,
    PRIMARY KEY (sdate)
);

DELIMITER //
CREATE TRIGGER trigger_stats
	AFTER INSERT ON speise 
	FOR EACH ROW 
	BEGIN 
		IF (SELECT COUNT(sdate) FROM stats WHERE sdate = CURRENT_DATE) = 0 THEN
			INSERT INTO stats VALUES (CURRENT_DATE, (SELECT COUNT(snr) FROM speise));
		ELSE
			UPDATE stats SET scount = (SELECT COUNT(snr) FROM speise) WHERE datum = CURRENT_DATE;
		END IF;
	END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER trigger_delete_stats
	AFTER DELETE ON speise 
	FOR EACH ROW 
	BEGIN 
		IF (SELECT COUNT(sdate) FROM stats WHERE sdate = CURRENT_DATE) = 0 THEN
			INSERT INTO stats VALUES (CURRENT_DATE, (SELECT COUNT(snr) FROM speise));
		ELSE
			UPDATE stats SET scount = (SELECT COUNT(snr) FROM speise) WHERE sdate = CURRENT_DATE;
		END IF;
	END;//
DELIMITER ;

-- Test data
INSERT INTO speise VALUES (9, 'Menue fuer 5', 32);
INSERT INTO speise VALUES (10, 'Menue fuer 6', 45);

SELECT * FROM stats;

DELETE FROM speise WHERE snr = 9;

SELECT * FROM stats;

-- :: Au09e ::
-- AUTHOR: Markus Reichl
-- VERSION: 2018-04-19
CREATE TABLE table_id (
	id INT,
	PRIMARY KEY (id)
) ENGINE=MYISAM;

CREATE TABLE table_key (
	kid INT,	-- Foreign key for table
	id INT,		-- Primary key of table
	PRIMARY KEY (kid)
) ENGINE=MYISAM;

DELIMITER //
CREATE TRIGGER trigger_insert_key
	BEFORE INSERT ON table_key
	FOR EACH ROW 
	BEGIN
		IF (SELECT COUNT(id) FROM table_id WHERE id = NEW.id) = 0 THEN
			SIGNAL SQLSTATE '45000' set message_text = 'id not found';
		END IF;
	END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER trigger_update_key
	BEFORE UPDATE ON table_key 
	FOR EACH ROW 
	BEGIN
		IF (SELECT COUNT(id) FROM table_id WHERE id = NEW.id) = 0 THEN
			SIGNAL SQLSTATE '45000' set message_text = 'id not found';
		END IF;
	END;//
DELIMITER ;
 
DELIMITER //
CREATE TRIGGER table_delete
	BEFORE DELETE ON table_id 
	FOR EACH ROW 
	BEGIN
		DELETE FROM table_key WHERE id = OLD.id;
	END;//
DELIMITER ;

-- Tests
INSERT INTO table_id VALUES (1);
INSERT INTO table_id VALUES (2);

INSERT INTO table_key VALUES (1, 3);
INSERT INTO table_key VALUES (1, 1);
INSERT INTO table_key VALUES (2, 2);

UPDATE table_key SET id = 3 WHERE did = 2;
SELECT * FROM table_key;

DELETE FROM table_id WHERE id = 2;
SELECT * FROM table_key;


-- :: Au09f ::
-- AUTHOR: Markus Reichl
-- VERSION: 2018-04-19
-- 1.) Sind mehrere Trigger für dasselbe Aktivierungs-Event (z.B. BEFORE INSERT ON xxx) zulässig?
-- >> NEIN

-- 2.) Können innerhalb BEGIN … END mehrere SQL-Anweisungen definiert werden?
-- >> JA

-- 3.) Können Trigger die Anweisungen START TRANSACTION, COMMIT oder ROLLBACK enthalten?
-- >> NEIN

-- 4.) Was bewirkt das Constraint NOT NULL in Kombination mit einem BEFORE-Trigger? 
-- >> NULL kann überschrieben werden. D.h. wird das Constraint nicht benötigt

-- 5.) Kann in einem Trigger auf Datensätze einer anderen Tabelle zugegriffen werden?
-- >> JA
















 
